{{define "content"}}{{- /*gotype:github.com/mdhender/ottoweb/components/app/pages/reports/uploads/docx.Content_t*/ -}}
<div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
    <form action="/dev/null" method="POST" hx-encoding="multipart/form-data" enctype="multipart/form-data">
        <div class="space-y-12">
            <div class="border-b border-gray-900/10 pb-12">
                <h2 class="text-base font-semibold leading-7 text-gray-900">Upload turn reports</h2>
                <p class="mt-1 text-sm leading-6 text-gray-600">
                    Drop your turn report in to the box below (the original Microsoft Word document works best).
                </p>

                <div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6">
                    <div class="col-span-full">
                        <label for="drop_zone" class="block text-sm font-medium leading-6 text-gray-900">Drop Zone</label>
                        <div id="drop_zone"
                             class="mt-2 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10">
                            <div class="text-center">
                                <svg class="mx-auto h-12 w-12 text-gray-300" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true" data-slot="icon">
                                    <path fill-rule="evenodd" d="M1.5 6a2.25 2.25 0 0 1 2.25-2.25h16.5A2.25 2.25 0 0 1 22.5 6v12a2.25 2.25 0 0 1-2.25 2.25H3.75A2.25 2.25 0 0 1 1.5 18V6ZM3 16.06V18c0 .414.336.75.75.75h16.5A.75.75 0 0 0 21 18v-1.94l-2.69-2.689a1.5 1.5 0 0 0-2.12 0l-.88.879.97.97a.75.75 0 1 1-1.06 1.06l-5.16-5.159a1.5 1.5 0 0 0-2.12 0L3 16.061Zm10.125-7.81a1.125 1.125 0 1 1 2.25 0 1.125 1.125 0 0 1-2.25 0Z" clip-rule="evenodd" />
                                </svg>
                                <div class="mt-4 flex text-sm leading-6 text-gray-600">
                                    <label for="docx-upload" class="relative cursor-pointer rounded-md bg-white font-semibold text-indigo-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-600 focus-within:ring-offset-2 hover:text-indigo-500">
                                        <span>Select a report file</span>
                                        <input type="file" accept=".docx" onchange="onGetFile(this)"
                                               id="docx-upload" name="docx-upload"
                                               class="sr-only">
                                    </label>
                                    <p class="pl-1">or drag and drop</p>
                                </div>
                                <p class="text-xs leading-5 text-gray-600">Word document (.DOCX) up to 1MB</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-6 flex items-center justify-end gap-x-6">
            <a href="/dashboard" class="text-sm font-semibold leading-6 text-gray-900">Cancel</a>
            <button type="button" id="file-upload-button"
                    hx-post="/reports/docx/upload" hx-trigger="click" hx-target="#notifications-panel"
                    class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                Upload
            </button>
        </div>
    </form>

    <div class="relative">
        <div class="absolute inset-0 flex items-center" aria-hidden="true">
            <div class="w-full border-t border-gray-300"></div>
        </div>
        <div class="relative flex justify-center">
            <span class="bg-white px-2 text-sm text-gray-500">Text to Upload</span>
        </div>
    </div>

    <!-- parsed content will go here -->
    <div class="min-w-0 flex-1">
        <br><br><!-- these are needed to prevent the parsed content from blocking the notifications panel -->
        <div id="docx-content"></div>
    </div>
</div>

<script>
//----------------------------------------------------------------
// display the parsed content code
const targetContentId = "docx-content";

//----------------------------------------------------------------
// file input element code
const fileInputId = "docx-upload";
const fileInput = document.getElementById(fileInputId);

function onGetFile(el) {
    const file = el.files[0];
    docx.renderAsync(file, document.getElementById(targetContentId), null, {
        inWrapper: true, // was false
        ignoreWidth: true,
        ignoreHeight: true
    })
        .then(x => {
            document.getElementById("file-upload-button").scrollIntoView({
                behavior: 'smooth', // This makes the scroll smooth
                block: 'start'      // Aligns it to the top of the visible area
            });
        });
}

//----------------------------------------------------------------
// drag and drop code
const dropZoneId = "drop_zone";
const dropZone = document.getElementById(dropZoneId);

// Prevent default behaviors for drag-and-drop events
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    dropZone.addEventListener(eventName, preventDefaults, false);
});

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

// Add highlighting effect when a file is dragged over the drop zone
['dragenter', 'dragover'].forEach(eventName => {
    dropZone.addEventListener(eventName, () => dropZone.classList.add('highlight'), false);
});

['dragleave', 'drop'].forEach(eventName => {
    dropZone.addEventListener(eventName, () => dropZone.classList.remove('highlight'), false);
});

// Handle the file drop event
dropZone.addEventListener('drop', handleDrop, false);

function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;

    // do nothing if no files were dropped
    if (files.length === 0) {
        return;
    } else if (files.length > 1) {
        alert('Only one file can be dropped at a time');
        return;
    }

    const file = files[0];

    // Basic file validation (size and type)
    if (file.size > 1048576) {
        alert('File size must be less than 1MB');
        return;
    }

    // stuff the file into the file input element
    fileInput.files = files;

    // now we to render it and stuff it into the content div
    docx.renderAsync(file, document.getElementById(targetContentId), null, {
        inWrapper: true, // was false
        ignoreWidth: true,
        ignoreHeight: true
    })
        .then(x => {
            // after we've updated the div, scroll to the upload button
            document.getElementById("file-upload-button").scrollIntoView({
                behavior: 'smooth', // This makes the scroll smooth
                block: 'start'      // Aligns it to the top of the visible area
            });
        });
}


</script>
{{end}}
