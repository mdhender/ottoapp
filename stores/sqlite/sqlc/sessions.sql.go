// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package sqlc

import (
	"context"
)

const createUserSession = `-- name: CreateUserSession :exec
INSERT INTO sessions (sess_id, user_id, expires_at)
VALUES (?1, ?2, ?3)
`

type CreateUserSessionParams struct {
	SessID    string
	UserID    int64
	ExpiresAt int64
}

// CreateUserSession creates a new session for the given user id.
func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) error {
	_, err := q.db.ExecContext(ctx, createUserSession, arg.SessID, arg.UserID, arg.ExpiresAt)
	return err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE
FROM sessions
WHERE expires_at >= ?1
`

// DeleteExpiredSessions deletes all expired sessions.
func (q *Queries) DeleteExpiredSessions(ctx context.Context, dttm int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredSessions, dttm)
	return err
}

const deleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE
FROM sessions
WHERE user_id = ?1
`

// DeleteUserSessions deletes all sessions for the given user id.
func (q *Queries) DeleteUserSessions(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessions, userID)
	return err
}

const getSession = `-- name: GetSession :one

SELECT user_id,
       expires_at
FROM sessions
WHERE sess_id = ?1
`

type GetSessionRow struct {
	UserID    int64
	ExpiresAt int64
}

//	Copyright (c) 2024 Michael D Henderson. All rights reserved.
//
// GetSession returns the session with the given id.
// Fails if the session does not exist or user is not active.
func (q *Queries) GetSession(ctx context.Context, sessionID string) (GetSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getSession, sessionID)
	var i GetSessionRow
	err := row.Scan(&i.UserID, &i.ExpiresAt)
	return i, err
}
